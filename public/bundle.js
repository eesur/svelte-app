var app = (function (exports) {
'use strict';

function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function appendNode(node, target) {
	target.appendChild(node);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function destroyEach(iterations) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d();
	}
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component.options = options;

	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._root = options._root || component;
	component._yield = options._yield;
	component._bind = options._bind;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this._root._lock) return;
	this._root._lock = true;
	callAll(this._root._beforecreate);
	callAll(this._root._oncreate);
	callAll(this._root._aftercreate);
	this._root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);
	dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
	this._fragment.p(changed, this._state);
	dispatchObservers(this, this._observers.post, changed, this._state, oldState);
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};

/* src/Header.html generated by Svelte v1.40.0 */
function data() {
  return {
    title: 'No title'
  }
}

function create_main_fragment(state, component) {
	var h1, text, text_1, p, text_8, hr;

	return {
		c: function create() {
			h1 = createElement("h1");
			text = createText(state.title);
			text_1 = createText("\n\n");
			p = createElement("p");
			p.innerHTML = "This is a sample portfolio using the <a href=\"https://svelte.technology/\">magical disappearing UI framework, Svelte</a>, the sample content are illustrations from illustrator <a href=\"https://en.wikipedia.org/wiki/Charley_Harper\">Charley Harper</a>'s book <a href=\"https://www.amazon.co.uk/Charley-Harper-Illustrated-Life-Mini/dp/1934429821\">Charley Harper an Illustrated Life</a>";
			text_8 = createText("\n\n");
			hr = createElement("hr");
			this.h();
		},

		h: function hydrate() {
			h1.className = "h5 caps mb2";
			p.className = "max-width-3";
		},

		m: function mount(target, anchor) {
			insertNode(h1, target, anchor);
			appendNode(text, h1);
			insertNode(text_1, target, anchor);
			insertNode(p, target, anchor);
			insertNode(text_8, target, anchor);
			insertNode(hr, target, anchor);
		},

		p: function update(changed, state) {
			if (changed.title) {
				text.data = state.title;
			}
		},

		u: function unmount() {
			detachNode(h1);
			detachNode(text_1);
			detachNode(p);
			detachNode(text_8);
			detachNode(hr);
		},

		d: noop
	};
}

function Header(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(Header.prototype, proto);

/* src/Item.html generated by Svelte v1.40.0 */
function data$2() {
  return {
    title: '',
    subtitle: '',
    images: [{
      img: null,
      caption: ''
    }],
    copy: ''
  }
}

function encapsulateStyles$1(node) {
	setAttribute(node, "svelte-97470489", "");
}

function create_main_fragment$2(state, component) {
	var section, h1, text, text_1, span, text_2, text_3, text_4, p, text_5;

	var images = state.images;

	var each_blocks = [];

	for (var i = 0; i < images.length; i += 1) {
		each_blocks[i] = create_each_block$1(state, images, images[i], i, component);
	}

	return {
		c: function create() {
			section = createElement("section");
			h1 = createElement("h1");
			text = createText(state.title);
			text_1 = createText("\n  ");
			span = createElement("span");
			text_2 = createText(state.subtitle);
			text_3 = createText("\n  ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_4 = createText("\n");
			p = createElement("p");
			text_5 = createText(state.copy);
			this.h();
		},

		h: function hydrate() {
			section.className = "clearfix";
			h1.className = "h2 regular mb0 pb0";
			span.className = "block caps h5 mt0 mb2";
			p.className = "max-width-3 mb4";
		},

		m: function mount(target, anchor) {
			insertNode(section, target, anchor);
			appendNode(h1, section);
			appendNode(text, h1);
			appendNode(text_1, section);
			appendNode(span, section);
			appendNode(text_2, span);
			appendNode(text_3, section);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			appendNode(text_4, section);
			appendNode(p, section);
			appendNode(text_5, p);
		},

		p: function update(changed, state) {
			if (changed.title) {
				text.data = state.title;
			}

			if (changed.subtitle) {
				text_2.data = state.subtitle;
			}

			var images = state.images;

			if (changed.images) {
				for (var i = 0; i < images.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, images, images[i], i);
					} else {
						each_blocks[i] = create_each_block$1(state, images, images[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(section, text_4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = images.length;
			}

			if (changed.copy) {
				text_5.data = state.copy;
			}
		},

		u: function unmount() {
			detachNode(section);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy$$1() {
			destroyEach(each_blocks);
		}
	};
}

// (4:2) {{#each images as image}}
function create_each_block$1(state, images, image, image_index, component) {
	var figure, img, img_src_value, text, figcaption, text_1_value = image.caption, text_1;

	return {
		c: function create() {
			figure = createElement("figure");
			img = createElement("img");
			text = createText("\n      ");
			figcaption = createElement("figcaption");
			text_1 = createText(text_1_value);
			this.h();
		},

		h: function hydrate() {
			figure.className = "m0 p0";
			img.className = "fit mb1";
			img.src = img_src_value = image.img;
			encapsulateStyles$1(figcaption);
			figcaption.className = "center mb3 h6";
		},

		m: function mount(target, anchor) {
			insertNode(figure, target, anchor);
			appendNode(img, figure);
			appendNode(text, figure);
			appendNode(figcaption, figure);
			appendNode(text_1, figcaption);
		},

		p: function update(changed, state, images, image, image_index) {
			if ((changed.images) && img_src_value !== (img_src_value = image.img)) {
				img.src = img_src_value;
			}

			if ((changed.images) && text_1_value !== (text_1_value = image.caption)) {
				text_1.data = text_1_value;
			}
		},

		u: function unmount() {
			detachNode(figure);
		},

		d: noop
	};
}

function Item(options) {
	init(this, options);
	this._state = assign(data$2(), options.data);

	this._fragment = create_main_fragment$2(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(Item.prototype, proto);

/* src/App.html generated by Svelte v1.40.0 */
function data$1() {
  return {
    thumbCaption: 'View item',
    title: '',
    subtitle: '',
    images: [{
      img: null,
      caption: ''
    }],
    copy: ''
  }
}

var methods = {
  updateFeature: function (d) {
    console.log(d);
    this.set({ images: d.images });
    this.set({ copy: d.copy });
    this.set({ title: d.title });
    this.set({ subtitle: d.subtitle });
    window.scrollTo(200, 0);
  }
};

function encapsulateStyles(node) {
	setAttribute(node, "svelte-376397317", "");
}

function create_main_fragment$1(state, component) {
	var div, text_1, hr, text_2, h1, text_4, section;

	var item = new Item({
		_root: component._root,
		data: {
			title: state.title,
			subtitle: state.subtitle,
			images: state.images,
			copy: state.copy
		}
	});

	var content = state.content;

	var each_blocks = [];

	for (var i = 0; i < content.length; i += 1) {
		each_blocks[i] = create_each_block(state, content, content[i], i, component);
	}

	return {
		c: function create() {
			div = createElement("div");
			item._fragment.c();
			text_1 = createText("\n\n");
			hr = createElement("hr");
			text_2 = createText("\n\n");
			h1 = createElement("h1");
			h1.textContent = "index";
			text_4 = createText("\n\n");
			section = createElement("section");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		h: function hydrate() {
			div.className = "widget-container";
			h1.className = "h5 caps";
			section.className = "clearfix flex flex-wrap";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			item._mount(div, null);
			insertNode(text_1, target, anchor);
			insertNode(hr, target, anchor);
			insertNode(text_2, target, anchor);
			insertNode(h1, target, anchor);
			insertNode(text_4, target, anchor);
			insertNode(section, target, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}
		},

		p: function update(changed, state) {
			var item_changes = {};
			if (changed.title) item_changes.title = state.title;
			if (changed.subtitle) item_changes.subtitle = state.subtitle;
			if (changed.images) item_changes.images = state.images;
			if (changed.copy) item_changes.copy = state.copy;
			item._set( item_changes );

			var content = state.content;

			if (changed.content) {
				for (var i = 0; i < content.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, content, content[i], i);
					} else {
						each_blocks[i] = create_each_block(state, content, content[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(section, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = content.length;
			}
		},

		u: function unmount() {
			detachNode(div);
			detachNode(text_1);
			detachNode(hr);
			detachNode(text_2);
			detachNode(h1);
			detachNode(text_4);
			detachNode(section);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy$$1() {
			item.destroy(false);

			destroyEach(each_blocks);
		}
	};
}

// (10:0) {{#each content as item}}
function create_each_block(state, content, item, item_index, component) {
	var div, div_1, figure, img, img_src_value, text, figcaption, text_1_value = item.thumbCaption, text_1;

	return {
		c: function create() {
			div = createElement("div");
			div_1 = createElement("div");
			figure = createElement("figure");
			img = createElement("img");
			text = createText("\n        ");
			figcaption = createElement("figcaption");
			text_1 = createText(text_1_value);
			this.h();
		},

		h: function hydrate() {
			div.className = "col-3 align-center text-decoration-none";
			addListener(div, "click", click_handler);

			div._svelte = {
				component: component,
				content: content,
				item_index: item_index
			};

			encapsulateStyles(div_1);
			div_1.className = "img-wrap";
			figure.className = "m0 p0";
			encapsulateStyles(img);
			img.className = "fit";
			img.src = img_src_value = item.thumbnail;
			img.alt = "thumbnail";
			encapsulateStyles(figcaption);
			figcaption.className = "center";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(div_1, div);
			appendNode(figure, div_1);
			appendNode(img, figure);
			appendNode(text, figure);
			appendNode(figcaption, figure);
			appendNode(text_1, figcaption);
		},

		p: function update(changed, state, content, item, item_index) {
			div._svelte.content = content;
			div._svelte.item_index = item_index;

			if ((changed.content) && img_src_value !== (img_src_value = item.thumbnail)) {
				img.src = img_src_value;
			}

			if ((changed.content) && text_1_value !== (text_1_value = item.thumbCaption)) {
				text_1.data = text_1_value;
			}
		},

		u: function unmount() {
			detachNode(div);
		},

		d: function destroy$$1() {
			removeListener(div, "click", click_handler);
		}
	};
}

function click_handler(event) {
	var component = this._svelte.component;
	var content = this._svelte.content, item_index = this._svelte.item_index, item = content[item_index];
	component.updateFeature(item);
}

function App(options) {
	init(this, options);
	this._state = assign(data$1(), options.data);

	if (!options._root) {
		this._oncreate = [];
		this._beforecreate = [];
		this._aftercreate = [];
	}

	this._fragment = create_main_fragment$1(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		callAll(this._beforecreate);
		callAll(this._oncreate);
		callAll(this._aftercreate);
		this._lock = false;
	}
}

assign(App.prototype, methods, proto);

const data$3 = {
  content: [
    {
      thumbnail: 'assets/img/ch-01-t.png',
      thumbCaption: 'ITEM 001',
      title: 'Sample Item 001',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-01.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-02-t.png',
      thumbCaption: 'ITEM 002',
      title: 'Sample Item 002',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-02.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        },
        {
          img: 'assets/img/ch-02b.jpg',
          caption: 'Charley Harper Illustration'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-03-t.png',
      thumbCaption: 'ITEM 003',
      title: 'Sample Item 003',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-03.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-04-t.png',
      thumbCaption: 'ITEM 004',
      title: 'Sample Item 004',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-04.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-05-t.png',
      thumbCaption: 'ITEM 005',
      title: 'Sample Item 005',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-05.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-06-t.png',
      thumbCaption: 'ITEM 006',
      title: 'Sample Item 006',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-06.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-07-t.png',
      thumbCaption: 'ITEM 007',
      title: 'Sample Item 007',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-07.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-08-t.png',
      thumbCaption: 'ITEM 008',
      title: 'Sample Item 008',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-08.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    },
    {
      thumbnail: 'assets/img/ch-09-t.png',
      thumbCaption: 'ITEM 009',
      title: 'Sample Item 009',
      subtitle: '2017 Autumn',
      images: [
        {
          img: 'assets/img/ch-09.jpg',
          caption: 'Charley Harper Illustration (just used as sample)'
        }
      ],
      copy: 'Charley Harper (August 4, 1922 – June 10, 2007) was a Cincinnati-based American Modernist artist. He was best known for his highly stylized wildlife prints, posters and book illustrations.'
    }
  ]
};

const header = new Header({
  target: document.querySelector('.js-header'),
  data: {
    title: 'Portflio:'
  }
});

const app = new App({
  target: document.querySelector('.js-index'),
  data: data$3
});

exports.app = app;
exports.header = header;

return exports;

}({}));
//# sourceMappingURL=bundle.js.map
